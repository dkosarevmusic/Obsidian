import os
from datetime import datetime
from itertools import groupby
from typing import List

from obsidian_updater_core import AnalysisResult

def generate_replace_report(results: List[AnalysisResult], errors: List[AnalysisResult], report_path: str, vault_path: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ó–ê–ú–ï–ù–´ –±–ª–æ–∫–æ–≤.
    """
    results.sort(key=lambda r: (r.area.lower(), r.file_path.lower()))

    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(f"# üìú –û—Ç—á—ë—Ç –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})\n\n")
        
        files_to_check = sum(1 for r in results if not r.has_target_type or r.has_non_target_type)
        files_ok = len(results) - files_to_check

        f.write(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: **{len(results)}** —Ñ–∞–π–ª–æ–≤.\n")
        f.write(f"- ‚úÖ –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º: **{files_ok}**\n")
        f.write(f"- ‚úçÔ∏è –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞: **{files_to_check}**\n\n")
        
        if results:
            f.write("### –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ–±–ª–∞—Å—Ç—è–º\n\n")
            f.write("‚úçÔ∏è - *—Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: `type` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç `target_types` –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–º–µ—Å—å —Ü–µ–ª–µ–≤—ã—Ö –∏ –Ω–µ—Ü–µ–ª–µ–≤—ã—Ö —Ç–∏–ø–æ–≤.*\n\n")
            for area, group in groupby(results, key=lambda r: r.area):
                f.write(f"#### Area: {area}\n")
                for res in group:
                    relative_path = os.path.relpath(res.file_path, vault_path)
                    emoji = "‚úçÔ∏è" if not res.has_target_type or res.has_non_target_type else "üìÑ"
                    f.write(f"- {emoji} `{relative_path}` (Type: **{res.file_type}**, –ë–ª–æ–∫–æ–≤: {res.block_count})\n")
                f.write("\n")
        
        if errors:
            f.write("\n---\n\n")
            f.write(f"### ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(errors)}):\n")
            for err in errors:
                relative_path = os.path.relpath(err.file_path, vault_path)
                f.write(f"- ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ `{relative_path}`: {err.error}\n")
    
    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{report_path}'")

def generate_remove_report(results: List[AnalysisResult], errors: List[AnalysisResult], report_path: str, vault_path: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –£–î–ê–õ–ï–ù–ò–Ø —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π.
    """
    results.sort(key=lambda r: (r.area.lower(), r.file_path.lower()))

    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(f"# üßπ –û—Ç—á—ë—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})\n\n")
        f.write(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: **{len(results)}** —Ñ–∞–π–ª–æ–≤, –≥–¥–µ `dataviewjs` –±–ª–æ–∫ —Å–æ—Å–µ–¥—Å—Ç–≤—É–µ—Ç —Å `---`.\n\n")
        
        if results:
            f.write("### –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ–±–ª–∞—Å—Ç—è–º\n\n")
            for area, group in groupby(results, key=lambda r: r.area):
                f.write(f"#### Area: {area}\n")
                for res in group:
                    relative_path = os.path.relpath(res.file_path, vault_path)
                    f.write(f"- `{relative_path}` (–ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: {res.separators_found_count})\n")
                f.write("\n")
        
        if errors:
            f.write("\n---\n\n")
            f.write(f"### ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(errors)}):\n")
            for err in errors:
                relative_path = os.path.relpath(err.file_path, vault_path)
                f.write(f"- ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ `{relative_path}`: {err.error}\n")
    
    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{report_path}'")