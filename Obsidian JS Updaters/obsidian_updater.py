import os

from obsidian_updater_core import (
    SEPARATOR_CONFIG_NAME,
    DATAVIEWJS_BLOCK_RE,
    SEPARATOR_REMOVAL_RE,
)
from obsidian_updater_config import get_all_configs, select_config, load_config
from obsidian_updater_analysis import run_analysis
from obsidian_updater_reporting import (
    generate_replace_report,
    generate_remove_report,
)
from obsidian_updater_fileops import archive_and_modify_files

def handle_replace_operation(script_dir: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–º–µ–Ω—ã –±–ª–æ–∫–æ–≤ `dataviewjs`."""
    config_files = get_all_configs(script_dir, exclude=SEPARATOR_CONFIG_NAME)
    if not (config_path := select_config(config_files, script_dir)):
        return
    if not (config := load_config(config_path)):
        return
    
    if not (vault_path := config.get("vault_path")) or not os.path.isdir(vault_path):
        config_name = os.path.basename(config_path)
        print(f"‚ùå –û—à–∏–±–∫–∞: 'vault_path' –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π –≤ '{config_name}'.")
        return

    reference_file_path = config.get("reference_file_path")
    special_file_names = config.get("special_file_names", [])
    target_types = config.get("target_types", [])
    full_report_path = os.path.join(script_dir, config.get("report_file_name", "default_report.md"))
    
    print("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
    target_files, error_files = run_analysis(vault_path, special_file_names, target_types)

    files_with_blocks = [res for res in target_files if res.block_count > 0]
    print(f"–ò–∑ –Ω–∏—Ö {len(files_with_blocks)} —Ñ–∞–π–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç dataviewjs –±–ª–æ–∫–∏ –∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

    while (mode := input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n1. üìù –¢–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç\n2. üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç\n–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ")) not in ['1', '2']:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

    if mode == '1':
        print("\n--- –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç ---")
        generate_replace_report(files_with_blocks, error_files, full_report_path, vault_path)
    
    elif mode == '2':
        print("\n--- –†–µ–∂–∏–º: –ó–∞–º–µ–Ω–∞ –∏ –æ—Ç—á—ë—Ç ---")

        if not files_with_blocks:
            print("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö dataviewjs –±–ª–æ–∫–∏. –ó–∞–º–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            generate_replace_report(files_with_blocks, error_files, full_report_path, vault_path)
            return
        
        reference_content = ""
        try:
            with open(reference_file_path, 'r', encoding='utf-8') as f:
                reference_file_content = f.read()
            match = DATAVIEWJS_BLOCK_RE.search(reference_file_content)
            if not match:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í —Ñ–∞–π–ª–µ-—à–∞–±–ª–æ–Ω–µ '{reference_file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ ```dataviewjs...``` –¥–ª—è –∑–∞–º–µ–Ω—ã.")
                return
            
            reference_content = match.group(0)
            print(f"‚úÖ –§–∞–π–ª-—à–∞–±–ª–æ–Ω '{reference_file_path}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–ª–æ–∫ dataviewjs.")
        except (FileNotFoundError, TypeError) as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª-—à–∞–±–ª–æ–Ω '{reference_file_path}'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'reference_file_path' —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û—à–∏–±–∫–∞: {e}")
            return
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å {len(files_with_blocks)} —Ñ–∞–π–ª–æ–≤.")
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ 'yes'): ").lower()
        if confirm != 'yes':
            print("üö´ –ó–∞–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return

        modification_func = lambda content: DATAVIEWJS_BLOCK_RE.subn(reference_content, content)
        archive_and_modify_files(files_with_blocks, vault_path, modification_func)
        generate_replace_report(files_with_blocks, error_files, full_report_path, vault_path)

def handle_remove_operation(script_dir: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π '---'."""
    config_path = os.path.join(script_dir, SEPARATOR_CONFIG_NAME)
    if not os.path.exists(config_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: '{SEPARATOR_CONFIG_NAME}'")
        return
    
    if not (config := load_config(config_path)):
        return

    vault_path = config.get("vault_path")
    full_report_path = os.path.join(script_dir, config.get("report_file_name", "default_report.md"))
    if not vault_path or not os.path.isdir(vault_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: 'vault_path' –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π –≤ '{SEPARATOR_CONFIG_NAME}'")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ target_types –∏–∑ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    other_configs = get_all_configs(script_dir, exclude=SEPARATOR_CONFIG_NAME)

    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ 'exclude_configs'
    configs_to_exclude = config.get("exclude_configs", [])
    other_configs = [c for c in other_configs if c not in configs_to_exclude]

    if other_configs:
        print(f"‚ÑπÔ∏è –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –±—É–¥—É—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã 'target_types' –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {', '.join(other_configs)}")

    aggregated_types = set()
    for cfg_path_str in other_configs:
        full_cfg_path = os.path.join(script_dir, cfg_path_str)
        if other_cfg := load_config(full_cfg_path):
            aggregated_types.update(other_cfg.get("target_types", []))
    
    if not aggregated_types:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ 'target_types' –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –≥–¥–µ `type` –Ω–µ —É–∫–∞–∑–∞–Ω.")

    target_files, error_files = run_analysis(vault_path, special_names=[], target_types=list(aggregated_types))

    files_to_clean = [res for res in target_files if res.separators_found_count > 0]
    print(f"–ò–∑ –Ω–∏—Ö {len(files_to_clean)} —Ñ–∞–π–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ '---' –ø–æ—Å–ª–µ –±–ª–æ–∫–æ–≤ –∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

    while (mode := input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n1. üìù –¢–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç\n2. üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç\n–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ")) not in ['1', '2']:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

    if mode == '1':
        print("\n--- –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –æ—Ç—á—ë—Ç ---")
        generate_remove_report(files_to_clean, error_files, full_report_path, vault_path)
    
    elif mode == '2':
        print("\n--- –†–µ–∂–∏–º: –£–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç—á—ë—Ç ---")
        if not files_to_clean:
            print("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ—á–∏—Å—Ç–∫–∏.")
            generate_remove_report(files_to_clean, error_files, full_report_path, vault_path)
            return

        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å {len(files_to_clean)} —Ñ–∞–π–ª–æ–≤.")
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ 'yes'): ").lower()
        if confirm != 'yes':
            print("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return

        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫ (–≤–∫–ª—é—á–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å) –Ω–∞ —Å–∞–º –∫–æ–¥-–±–ª–æ–∫ + –¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏.
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ dataviewjs –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞,
        # –∏ –æ–Ω –Ω–µ "—Å–ª–∏–ø–Ω–µ—Ç—Å—è" —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ —Ñ–∞–π–ª–µ.
        modification_func = lambda content: SEPARATOR_REMOVAL_RE.subn(r"\1\n\n", content)
        archive_and_modify_files(files_to_clean, vault_path, modification_func)
        generate_remove_report(files_to_clean, error_files, full_report_path, vault_path)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:")
    print("1. üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–æ–¥-–±–ª–æ–∫–∏ dataviewjs")
    print("2. üßπ –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ '---' –ø–æ—Å–ª–µ –∫–æ–¥-–±–ª–æ–∫–æ–≤")
    
    while (choice := input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ")) not in ['1', '2']:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

    if choice == '1':
        print("\n--- –û–ø–µ—Ä–∞—Ü–∏—è: –ó–∞–º–µ–Ω–∞ –∫–æ–¥-–±–ª–æ–∫–æ–≤ ---")
        handle_replace_operation(script_dir)
    elif choice == '2':
        print("\n--- –û–ø–µ—Ä–∞—Ü–∏—è: –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π ---")
        handle_remove_operation(script_dir)

if __name__ == "__main__":
    main()