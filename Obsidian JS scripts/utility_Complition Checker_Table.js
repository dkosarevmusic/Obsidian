async function renderTableCompletion(dv, app) {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–ê–¢–£–°–û–í ---
    const STATUSES = {
        'in progress': { key: 'inprogress', fmKey: 'tasksinprogress', emoji: 'üöÄ', name: 'In progress' },
        'not started': { key: 'notstarted', fmKey: 'tasksnotstarted', emoji: '‚è≥', name: 'Not started' },
        'done':        { key: 'done',       fmKey: 'tasksdone',       emoji: '‚úÖ', name: 'Done' },
        'postpone':    { key: 'postpone',   fmKey: 'taskspostpone',   emoji: '‚è∏Ô∏è', name: 'Postpone' },
        'cancelled':   { key: 'cancelled',  fmKey: 'taskscancelled',  emoji: '‚ùå', name: 'Cancelled' }
    };
    const STATUS_KEY_MAP = Object.fromEntries(Object.entries(STATUSES).map(([name, conf]) => [name, conf.key]));
    const DISPLAY_ORDER = ['in progress', 'not started', 'done', 'postpone', 'cancelled'];

    // 1. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
    const curr = dv.current();
    if (!curr || !curr.file) {
        dv.paragraph("‚õîÔ∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ.");
        return;
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫: "–ª—É—á—à–µ–µ –∏–∑ –¥–≤—É—Ö –º–∏—Ä–æ–≤"
    // 1. –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é inlinks.
    // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–≤–µ—Ä—è—è, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–º–µ–Ω–Ω–æ –≤–æ frontmatter.
    const pages = dv.array(curr.file.inlinks.map(link => dv.page(link.path)))
        .where(p => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–±–∏—Ç—ã–µ" —Å—Å—ã–ª–∫–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ frontmatter
            if (!p || !p.file || !p.file.frontmatter) {
                return false;
            }

            // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ö–õ–Æ–ß–ê–ú frontmatter, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ü–ê–†–°–ï–ù–ù–´–ú Dataview –∑–Ω–∞—á–µ–Ω–∏—è–º
            for (const key of Object.keys(p.file.frontmatter)) {
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ Dataview —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª "[[...]]" –≤ –æ–±—ä–µ–∫—Ç Link)
                const value = p[key];

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤
                const links = Array.isArray(value) ? value : [value];
                
                // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
                if (links.some(link => dv.value.isLink(link) && link.path === curr.file.path)) {
                    return true; // –ù–∞—à–ª–∏ —Å—Å—ã–ª–∫—É, –≤–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                }
            }
            return false; // –°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤–æ frontmatter –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        });

    // 2. –ü–û–î–°–ß–ï–¢ –°–¢–ê–¢–£–°–û–í (–≤ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    const counts = Object.fromEntries(Object.values(STATUSES).map(s => [s.key, 0]));
    for (const p of pages) {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –µ–≥–æ 'not started'
        const status = (p.status && Array.isArray(p.status) && p.status.length > 0)
            ? p.status[0].toLowerCase()
            : 'not started';

        const key = STATUS_KEY_MAP[status];
        if (key) counts[key]++;
    }

    // 3. –†–ê–°–ß–ï–¢ –ò–¢–û–ì–û–í
    const totalLinks = pages.length;
    const doneCount = counts.done;
    const cancelledCount = counts.cancelled;
    const totalForProgress = totalLinks - cancelledCount;
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.
    // –≠—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –º–∏–Ω—É—Å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ.
    const totalRemaining = totalForProgress - doneCount;

    // 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï FRONTMATTER (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    const tfile = app.vault.getAbstractFileByPath(curr.file.path);
    if (tfile && !tfile.children) {
        const fm = curr.file.frontmatter || {};

        // --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –õ–û–ì–ò–ö–ê COMPVIS ---
        const VISIBILITY_KEY = 'compvis';
        const isVisible = fm[VISIBILITY_KEY] !== false;
        
        const compKey = isVisible ? 'comp' : 'compx';
        const tasksKey = isVisible ? 'tasks' : 'tasksx';
        const oldCompKey = isVisible ? 'compx' : 'comp';
        const oldTasksKey = isVisible ? 'tasksx' : 'tasks';

        // --- –í–´–ß–ò–°–õ–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô ---
        const newPctStr = totalForProgress > 0 ? `${Math.round((counts.done / totalForProgress) * 100)}%` : "0%";
        const newRatio = `${counts.done}/${totalForProgress || 0}`;

        // --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–ô ---
        const updates = {};
        const deletions = [];

        // 4.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º `compvis` –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (fm[VISIBILITY_KEY] === undefined) {
            updates[VISIBILITY_KEY] = true;
        }

        // 4.2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ `comp` / `compx`
        if (fm.hasOwnProperty(oldCompKey)) {
            deletions.push(oldCompKey);
        }
        if (fm[compKey] !== newPctStr || deletions.includes(oldCompKey)) {
            updates[compKey] = newPctStr;
        }

        // 4.3. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø–æ–ª—è `tasks` / `tasksx`
        if (fm.hasOwnProperty(oldTasksKey)) {
            deletions.push(oldTasksKey);
        }
        if (fm[tasksKey] !== newRatio || deletions.includes(oldTasksKey)) {
            updates[tasksKey] = newRatio;
        }
        
        // 4.4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ (—Å—Ç–∞—Ç—É—Å—ã)
        const statusValues = Object.fromEntries(Object.values(STATUSES).map(s => [s.fmKey, counts[s.key]]));
        for (const key in statusValues) {
            if (fm[key] !== statusValues[key]) {
                updates[key] = statusValues[key];
            }
        }

        // 4.5. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (Object.keys(updates).length > 0 || deletions.length > 0) {
            await app.fileManager.processFrontMatter(tfile, (frontmatter) => {
                Object.assign(frontmatter, updates);
                for (const key of deletions) {
                    delete frontmatter[key];
                }
            });
        }
    }

    // 5. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    if (totalLinks === 0) {
        dv.paragraph("–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.");
    } else {
        // 5.1. –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏
        const completionPercentage = totalForProgress > 0 ? Math.round((counts.done / totalForProgress) * 100) : 0;
        dv.paragraph(`üéØ **Tasks**: ${counts.done}/${totalForProgress} &nbsp;&nbsp;&nbsp; üìà **Completion**: ${completionPercentage}%`);
        
        // 5.2. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        dv.paragraph('<hr />');

        // 5.3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        const tableRows = [];
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—å —è—á–µ–π–∫–∏ –∏ —Ä–∞–º–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—è —Å—Ç–∏–ª–∏ —Ç–µ–º—ã
        const cellStyle = "border: none; background: transparent;";
        for (const statusName of DISPLAY_ORDER) {
            const statusInfo = STATUSES[statusName];
            const count = counts[statusInfo.key];

            if (count > 0) {
                // –Ø—á–µ–π–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫.
                const statusCell = `<td style="${cellStyle} padding-right: 1em;">${statusInfo.emoji}&nbsp;${statusInfo.name}:</td>`;
                
                // –Ø—á–µ–π–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                let progressCell;
                if (statusName === 'cancelled') {
                    progressCell = `<td style="${cellStyle}"><b>${count}</b></td>`;
                } else {
                    // –î–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ ('in progress', 'not started', 'postpone') 
                    // –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ (–±–µ–∑ 'done' –∏ 'cancelled').
                    // –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ 'done' –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å (–±–µ–∑ 'cancelled').
                    const isRemainingStatus = ['in progress', 'not started', 'postpone'].includes(statusName);
                    const denominator = isRemainingStatus ? totalRemaining : totalForProgress;

                    const progressTag = denominator > 0 
                        ? `<progress value="${count}" max="${denominator}"></progress>` 
                        : '';
                    // `vertical-align: middle` –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                    progressCell = `<td style="${cellStyle} vertical-align: middle;">${progressTag}&nbsp;<b>${count}/${denominator || 0}</b></td>`;
                }
                tableRows.push(`<tr>${statusCell}${progressCell}</tr>`);
            }
        }
        
        if (tableRows.length > 0) {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–º–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤–∏–¥–∞.
            const tableHtml = `<table style="border-spacing: 0; border-collapse: collapse; border: none;"><tbody>${tableRows.join('')}</tbody></table>`;
            dv.el('div', tableHtml);
        } else if (totalLinks > 0) { // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            dv.paragraph("–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.");
        }

        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        dv.paragraph('<hr />');
    }
}

return renderTableCompletion;