async function renderProjectCompletion(dv, app) {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–ê–¢–£–°–û–í ---
    // –ï–¥–∏–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏, –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–ª—é—á–∞–º–∏ –≤ frontmatter.
    const STATUSES = {
        'in progress': { key: 'inprogress', fmKey: 'tasksinprogress', emoji: 'üöÄ', name: 'In progress' },
        'not started': { key: 'notstarted', fmKey: 'tasksnotstarted', emoji: '‚è≥', name: 'Not started' },
        'done':        { key: 'done',       fmKey: 'tasksdone',       emoji: '‚úÖ', name: 'Done' },
        'postpone':    { key: 'postpone',   fmKey: 'taskspostpone',   emoji: '‚è∏Ô∏è', name: 'Postpone' },
        'cancelled':   { key: 'cancelled',  fmKey: 'taskscancelled',  emoji: '‚ùå', name: 'Cancelled' }
    };
    // –ü–æ—Ä—è–¥–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ.
    const DISPLAY_ORDER = ['in progress', 'not started', 'done', 'postpone', 'cancelled'];

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---

    // 1. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
    const curr = dv.current();
    if (!curr || !curr.file) {
        dv.paragraph("‚õîÔ∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ.");
        return;
    }

    // 2. –ü–û–ò–°–ö –ò–°–¢–û–ß–ù–ò–ö–û–í (–ü–û–î-–ü–†–û–ï–ö–¢–û–í –ò –ó–ê–î–ê–ß)
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    // –∏ –≥–¥–µ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–º–µ–Ω–Ω–æ –≤ frontmatter.
    const sourcePages = dv.array(curr.file.inlinks.map(link => dv.page(link.path)))
        .where(p => {
            if (!p || !p.file || !p.file.frontmatter) return false;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ frontmatter –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            for (const key of Object.keys(p.file.frontmatter)) {
                const value = p[key];
                const links = Array.isArray(value) ? value : [value];
                if (links.some(link => dv.value.isLink(link) && link.path === curr.file.path)) {
                    return true;
                }
            }
            return false;
        });

    // 3. –ê–ì–†–ï–ì–ê–¶–ò–Ø –î–ê–ù–ù–´–•
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω—É–ª—è–º–∏.
    const totalCounts = Object.fromEntries(Object.values(STATUSES).map(s => [s.key, 0]));
    const statusSources = {
        inprogress: new Set(),
        notstarted: new Set(),
        postpone: new Set(),
        cancelled: new Set()
    };

    for (const p of sourcePages) {
        const fm = p.file.frontmatter;
        if (!fm) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ "–ø–æ–¥-–ø—Ä–æ–µ–∫—Ç–æ–º" (–¢–∏–ø –ê)
        // –ü—Ä–∏–∑–Ω–∞–∫: –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π `tasks...`
        const isSubProject = Object.values(STATUSES).some(s => fm.hasOwnProperty(s.fmKey));

        if (isSubProject) {
            // –≠—Ç–æ –ø–æ–¥-–ø—Ä–æ–µ–∫—Ç. –°—É–º–º–∏—Ä—É–µ–º –µ–≥–æ –≥–æ—Ç–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏.
            for (const statusInfo of Object.values(STATUSES)) {
                const count = parseInt(fm[statusInfo.fmKey], 10) || 0;
                totalCounts[statusInfo.key] += count;
                if (count > 0 && statusSources.hasOwnProperty(statusInfo.key)) {
                    statusSources[statusInfo.key].add(p.file.path);
                }
            }
        } else if (typeof fm.tasks === 'string' && fm.tasks.includes('/')) {
            // –≠—Ç–æ "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" (–¢–∏–ø –ë) —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏.
            const parts = fm.tasks.split('/');
            if (parts.length !== 2) continue;

            const done = parseInt(parts[0], 10);
            const total = parseInt(parts[1], 10);

            if (isNaN(done) || isNaN(total)) continue;

            // 1. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—á–µ—Ç—á–∏–∫ 'done'.
            totalCounts.done += done;

            const uncompleted = total - done;
            if (uncompleted > 0) {
                // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ù–ï–í–´–ü–û–õ–ù–ï–ù–ù–´–• –∑–∞–¥–∞—á –∏–∑ –ø–æ–ª—è 'status' —ç—Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞.
                let statusKey = 'notstarted'; // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                const statusValue = (Array.isArray(fm.status) ? fm.status[0] : fm.status)?.toLowerCase();

                if (statusValue) {
                    const statusInfo = STATUSES[statusValue] || Object.values(STATUSES).find(s => s.key === statusValue);
                    if (statusInfo) statusKey = statusInfo.key;
                }
                // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.
                totalCounts[statusKey] += uncompleted;
                if (statusSources.hasOwnProperty(statusKey)) {
                    statusSources[statusInfo.key].add(p.file.path);
                }
            }
        }
    }

    // 4. –†–ê–°–ß–ï–¢ –ò–¢–û–ì–û–í
    const totalDone = totalCounts.done;
    const totalAll = Object.values(totalCounts).reduce((sum, count) => sum + count, 0);
    const totalForProgress = totalAll - totalCounts.cancelled;
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.
    // –≠—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –º–∏–Ω—É—Å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ.
    const totalRemaining = totalForProgress - totalDone;

    // 5. –û–ë–ù–û–í–õ–ï–ù–ò–ï FRONTMATTER (–¢–û–õ–¨–ö–û –ü–†–ò –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò)
    const tfile = app.vault.getAbstractFileByPath(curr.file.path);
    if (tfile && !tfile.children) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
        const currentFm = curr.file.frontmatter || {};
        const newFmValues = {
            tasks: `${totalDone}/${totalForProgress || 0}`,
            comp: totalForProgress > 0 ? `${Math.round((totalDone / totalForProgress) * 100)}%` : "0%",
            ...Object.fromEntries(Object.values(STATUSES).map(s => [s.fmKey, totalCounts[s.key]]))
        };

        const needsUpdate = Object.keys(newFmValues).some(key => currentFm[key] !== newFmValues[key]);

        if (needsUpdate) {
            await app.fileManager.processFrontMatter(tfile, fm => {
                Object.assign(fm, newFmValues);
            });
        }
    }

    // 6. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    if (totalAll === 0) {
        dv.paragraph("–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.");
    } else {
        // 6.1. –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏
        const completionPercentage = totalForProgress > 0 ? Math.round((totalDone / totalForProgress) * 100) : 0;
        dv.paragraph(`üéØ **Tasks**: ${totalDone}/${totalForProgress} &nbsp;&nbsp;&nbsp; üìà **Completion**: ${completionPercentage}%`);

        // 6.2. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        dv.paragraph('<hr />');

        // 6.3. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º flexbox –≤–º–µ—Å—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤.
        const flexRows = [];
        for (const statusName of DISPLAY_ORDER) {
            const statusInfo = STATUSES[statusName];
            const count = totalCounts[statusInfo.key];

            if (count > 0) {
                const statusCell = `<div style="width: 120px; flex-shrink: 0;">${statusInfo.emoji}&nbsp;${statusInfo.name}:</div>`;
                let progressContent = '';

                const sourceSet = statusSources[statusInfo.key];
                let fileNamesString = '';
                if (sourceSet && sourceSet.size > 0) {
                    const fileListItems = Array.from(sourceSet)
                        .sort() // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                        .map(path => { // ... (–∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                            const linkTarget = path.replace(/\.md$/, '');
                            const linkText = linkTarget.includes('/') ? linkTarget.substring(linkTarget.lastIndexOf('/') + 1) : linkTarget;
                            return `<li><a data-href="${linkTarget}" href="${linkTarget}" class="internal-link">${linkText}</a></li>`;
                        })
                        .join('');
                    
                    // <details> —Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º.
                    // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–µ–µ –≤ flexbox-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, —á–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ.
                    fileNamesString = `
                        <div style="position: relative; display: inline-block; vertical-align: middle; margin-left: 8px; top: -0.07em;">
                            <details>
                                <summary style="cursor: pointer; font-size: 0.8em; color: var(--text-normal); list-style: none; display: inline-block; background-color: var(--background-secondary); border: 1px solid var(--background-modifier-border); border-radius: 5px; padding: 2px 8px; line-height: 1.2;">
                                    <b>in ${sourceSet.size} files</b>
                                </summary>
                                <ul style="position: absolute; top: 100%; left: 0; z-index: 10; width: max-content; max-width: 400px; background-color: var(--background-secondary); border: 1px solid var(--background-modifier-border); border-radius: 6px; padding: 8px 8px 8px 0px; margin-top: 5px; list-style-type: disc; text-align: left;">
                                    ${fileListItems}
                                </ul>
                            </details>
                        </div>`.replace(/\n\s*/g, '');
                }

                if (statusInfo.key === 'cancelled') {
                    progressContent = `<b>${count}</b>${fileNamesString}`;
                } else {
                    const isRemainingStatus = ['inprogress', 'notstarted', 'postpone'].includes(statusInfo.key);
                    const denominator = isRemainingStatus ? totalRemaining : totalForProgress;
                    const progressTag = denominator > 0 ? `<progress style="position: relative; top: 0.1em;" value="${count}" max="${denominator}"></progress>` : '';
                    progressContent = `${progressTag}&nbsp;<b>${count}/${denominator || 0}</b>${fileNamesString}`;
                }
                const progressCell = `<div style="display: flex; align-items: center;">${progressContent}</div>`;
                flexRows.push(`<div style="display: flex; align-items: center;">${statusCell}${progressCell}</div>`);
            }
        }

        if (flexRows.length > 0) {
            const flexContainerHtml = `<div style="display: flex; flex-direction: column; gap: 4px;">${flexRows.join('')}</div>`;
            dv.el('div', flexContainerHtml);

            // --- –õ–û–ì–ò–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í –ü–†–ò –ö–õ–ò–ö–ï –í–ù–ï –ò–• ---
            const allDetails = dv.container.querySelectorAll('details');

            allDetails.forEach(details => {
                // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                const clickOutsideHandler = (event) => {
                    if (details.open && !details.contains(event.target)) {
                        details.removeAttribute('open'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤–µ—Ç 'toggle'
                    }
                };

                details.addEventListener('toggle', () => {
                    if (details.open) {
                        // –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å.
                        // setTimeout –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Ç–æ—Ç –∂–µ –∫–ª–∏–∫,
                        // –∫–æ—Ç–æ—Ä—ã–π –∏ –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫.
                        setTimeout(() => document.addEventListener('click', clickOutsideHandler), 0);
                    } else {
                        // –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç, —É–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å.
                        document.removeEventListener('click', clickOutsideHandler);
                    }
                });
            });
        }

        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        dv.paragraph('<hr />');
    }
}

return renderProjectCompletion;
