async function renderCheckboxCompletion(dv, app) {
  // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
  // –ö–ª—é—á–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –í–ò–î–ò–ú –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
  const VISIBLE_COMP_KEY = 'comp';
  const VISIBLE_TASKS_KEY = 'tasks';
  // –ö–ª—é—á–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –°–ö–†–´–¢
  const HIDDEN_COMP_KEY = 'compx';
  const HIDDEN_TASKS_KEY = 'tasksx';
  // –ö–ª—é—á-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
  const VISIBILITY_KEY = 'compvis';

  // --- 1. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ---
  const file = dv.current().file;
  const fm = file.frontmatter;
  const allTasks = file.tasks || [];
  
  // --- 2. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø ---
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ (true). –û–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ `false`.
  const isVisible = fm[VISIBILITY_KEY] !== false; 
  
  const compKey = isVisible ? VISIBLE_COMP_KEY : HIDDEN_COMP_KEY;
  const tasksKey = isVisible ? VISIBLE_TASKS_KEY : HIDDEN_TASKS_KEY;
  const oldCompKey = isVisible ? HIDDEN_COMP_KEY : VISIBLE_COMP_KEY;
  const oldTasksKey = isVisible ? HIDDEN_TASKS_KEY : VISIBLE_TASKS_KEY;

  // --- 3. –í–´–ß–ò–°–õ–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô ---
  const total = allTasks.length;
  const done = allTasks.where(t => t.completed).length;
  const newPct = total > 0 ? Math.round(done / total * 100) : 0;
  const newPctStr = `${newPct}%`;
  const newRatio = `${done}/${total}`;

  // --- 4. –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø FRONTMATTER ---
  const updates = {};
  const deletions = [];

  // 4.1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º `compvis` –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (fm[VISIBILITY_KEY] === undefined) {
    updates[VISIBILITY_KEY] = true;
  }

  // 4.2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ `comp` / `compx`
  // –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, `compx`) —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
  if (fm.hasOwnProperty(oldCompKey)) {
    deletions.push(oldCompKey);
  }
  // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∫–ª—é—á (`comp`) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
  if (fm[compKey] !== newPctStr || deletions.includes(oldCompKey)) {
    updates[compKey] = newPctStr;
  }

  // 4.3. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø–æ–ª—è `tasks` / `tasksx`
  if (fm.hasOwnProperty(oldTasksKey)) {
    deletions.push(oldTasksKey);
  }
  if (fm[tasksKey] !== newRatio || deletions.includes(oldTasksKey)) {
    updates[tasksKey] = newRatio;
  }

  // 4.4. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–∏–º –º–∞—Ö–æ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (Object.keys(updates).length > 0 || deletions.length > 0) {
    const tfile = app.vault.getAbstractFileByPath(file.path);
    if (tfile && !tfile.children) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
      await app.fileManager.processFrontMatter(tfile, (frontmatter) => {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for (const key in updates) {
          frontmatter[key] = updates[key];
        }
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
        for (const key of deletions) {
          delete frontmatter[key];
        }
      });
    }
  }

  // --- 5. –í–´–í–û–î –í PREVIEW ---
  if (total === 0) {
    dv.paragraph("–í —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á.");
  } else {
    // 5.1. –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    dv.paragraph(`üéØ **Tasks**: ${newRatio} &nbsp;&nbsp;&nbsp; ‚úÖ **Completion**: **${newPctStr}**`);
  }
}

return renderCheckboxCompletion;