async function runUpdater(dv, app, container) {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
    // –°–ø–∏—Å–æ–∫ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.
    const SCRIPTS_TO_MANAGE = [
        "JS Scripts/utility_Complition Checker_Table.js",
        "JS Scripts/utility_Complition Checker_Project.js",
        "JS Scripts/utility_Complition Checker_Checkboxes.js"
    ];
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç—É.
    const SCRIPT_PATH_REGEX = /const\s+SCRIPT_PATH\s*=\s*["'](.*?)["']/;

    // --- –°–û–°–¢–û–Ø–ù–ò–ï ---
    let totalFilesUpdated = 0;
    const errorFiles = [];

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    try {
        // 1. –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.
        // –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏.
        container.innerHTML = '<h4>üöÄ –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</h4>';
        dv.paragraph("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...");

        const allMdFiles = app.vault.getMarkdownFiles();
        const filesToUpdate = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map: scriptPath -> [file1, file2, ...]

        for (const file of allMdFiles) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            const content = await app.vault.cachedRead(file);
            if (!content.includes("dataviewjs")) continue;

            const match = content.match(SCRIPT_PATH_REGEX);
            if (match && SCRIPTS_TO_MANAGE.includes(match[1])) {
                const scriptPath = match[1];
                if (!filesToUpdate.has(scriptPath)) {
                    filesToUpdate.set(scriptPath, []);
                }
                filesToUpdate.get(scriptPath).push(file);
            }
        }

        if (filesToUpdate.size === 0) {
            dv.paragraph("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã. –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.");
            return;
        }

        // 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤.
        for (const [scriptPath, targetFiles] of filesToUpdate.entries()) {
            dv.paragraph(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${targetFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞: \`${scriptPath}\``);

            // 2.1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
            let renderFunction;
            try {
                const scriptText = await dv.io.load(scriptPath);
                renderFunction = new Function(scriptText)();
                if (typeof renderFunction !== 'function') throw new Error("–°–∫—Ä–∏–ø—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª —Ñ—É–Ω–∫—Ü–∏—é.");
            } catch (e) {
                errorFiles.push({ path: scriptPath, error: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/—Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å: ${e.message}` });
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ —Å–∞–º —Å–∫—Ä–∏–ø—Ç —Å–ª–æ–º–∞–Ω.
            }

            // 2.2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å "–ø–µ—Å–æ—á–Ω–∏—Ü—É": —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ dv –∏ –ø–æ–¥–º–µ–Ω—è–µ–º –∏—Ö –ø—É—Å—Ç—ã—à–∫–∞–º–∏.
            const originalDv = { current: dv.current, el: dv.el, paragraph: dv.paragraph, table: dv.table, list: dv.list };
            const noOp = () => {};
            Object.assign(dv, { el: noOp, paragraph: noOp, table: noOp, list: noOp });

            // 2.3. –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.
            for (const targetFile of targetFiles) {
                try {
                    // –ì–õ–ê–í–ù–ê–Ø –•–ò–¢–†–û–°–¢–¨: –ø–æ–¥–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã dv.current() —É–∫–∞–∑—ã–≤–∞–ª –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª.
                    dv.current = () => dv.page(targetFile.path);
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞. –û–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç frontmatter, –∞ –≤–µ—Å—å –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.
                    await renderFunction(dv, app);
                    totalFilesUpdated++;
                } catch (e) {
                    errorFiles.push({ path: targetFile.path, error: e.message });
                }
            }

            // 2.4. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ dv.
            Object.assign(dv, originalDv);
        }

        // 3. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
        container.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏.
        const finishTime = new Date().toLocaleTimeString('ru-RU');

        dv.header(2, "–û—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
        dv.paragraph(`‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.**`);
        dv.paragraph(`- **–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${finishTime}`);
        dv.paragraph(`- **–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${totalFilesUpdated}`);

        if (errorFiles.length > 0) {
            dv.header(3, `‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ (${errorFiles.length})`);
            const errorRows = errorFiles.map(e => [`[[${e.path}]]`, `\`${e.error}\``]);
            dv.table(["–§–∞–π–ª", "–û—à–∏–±–∫–∞"], errorRows);
        }

    } catch (e) {
        container.innerHTML = '';
        dv.el("pre", `‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç–µ:**\n\n${e.stack}`);
    }
}

return runUpdater;